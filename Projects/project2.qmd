---
title: "Project 2 - Late flights and missing data (JSON files)"
subtitle: "Course DS 250"
author: "Tamanna Sangroula"
format:
  html:
    self-contained: true
    page-layout: full
    title-block-banner: true
    toc: true
    toc-depth: 3
    toc-location: body
    number-sections: false
    html-math-method: katex
    code-fold: true
    code-summary: "Show the code"
    code-overflow: wrap
    code-copy: hover
    code-tools:
        source: false
        toggle: true
        caption: See code
execute: 
  warning: false
    
---

```{python}
#| label: libraries
#| include: false
import pandas as pd
import numpy as np
import plotly.express as px


```


## Elevator pitch

_This project shows the analysis of delays on flights of 7 airports over the course of 10 years. I have cleaned the data as well as searched for insights about flight delays. Based on my analysis Salt lakt City Airport has the least delays of an average of 0.12 hrs. It seems like September and November are the best months to travel as it has the least average delays. Weather is one of the biggest factors for delay in flights. Other reasons for delay were Air Carrier, National Aviation System, Late-Arriving Aircraft, and Security._

```{python}
#| label: project-data
#| code-summary: Read and format project data

# Learn morea about Code Cells: https://quarto.org/docs/reference/cells/cells-jupyter.html

# Include and execute your code here
df = pd.read_json("https://raw.githubusercontent.com/byuidatascience/data4missing/master/data-raw/flights_missing/flights_missing.json")
```

__Highlight the Questions and Tasks__

## QUESTION|TASK 1
__Fix all of the varied missing data types in the data to be consistent (all missing values should be displayed as “NaN”). In your report include one record example (one row) from your new data, in the raw JSON format. Your example should display the “NaN” for at least one missing value.__

_Fixed and replaced all the missing values in the data with "NaN". _

```{python}
#| label: Q1
#| code-summary: Read and format data
# Include and execute your code here
# Assuming df is your DataFrame
columns_missing_values = df.columns[df.isnull().any()].tolist()
for each in columns_missing_values:
    df[each].fillna("NaN", inplace=True) 
search_value = "NaN"

rows_with_search_value = df[(df == search_value).any(axis=1)]
for index, row in rows_with_search_value.iterrows():
  if index != 2:
    print(row)
    break
```

_include figures chunks and discuss your findings in the figure._


## QUESTION|TASK 2

__Which airport has the worst delays? Discuss the metric you chose, and why you chose it to determine the “worst” airport. Your answer should include a summary table that lists (for each airport) the total number of flights, total number of delayed flights, proportion of delayed flights, and average delay time in hours.__

_Taking the metrics, proportiona of delayed flights and average delay time, SFO airport has the worst delay with 26.10% delay rate by an average delay of 0.27hrs. It is followed by ORD airport being very colse to SFO with an average dealy of 0.26 hrs. As ORD has the highest average and the highest proportion delays in flights, it is the "worst: airport in terms fof delay._

```{python}
#| label: Q2
#| code-summary: Read and format data
# Include and execute your code here
#df.query("num_of_flights_total > 50") 
# Include and execute your code here

group = df.groupby('airport_code').agg({
    'num_of_flights_total': 'sum',
    'num_of_delays_total': 'sum',
    'minutes_delayed_total': 'sum'
})

# Create a new DataFrame with calculated metrics
new_data = (group.assign(
              flights_total=lambda row: row['num_of_flights_total'],
              delays_total=lambda row: row['num_of_delays_total'],
              minutes_delayed_total=lambda row: row['minutes_delayed_total'],
              proportion_delayed=lambda row: (row['num_of_delays_total'] / row['num_of_flights_total']),
              avg_delay_time_hrs=lambda row: row['minutes_delayed_total'] / (60 * row['num_of_flights_total'])
          )
          .sort_values('num_of_flights_total', ascending=False)
)
new_data['proportion_delayed'] = new_data['proportion_delayed'].apply(lambda x: '{:.2%}'.format(x))
new_data['avg_delay_time_hrs'] = new_data['avg_delay_time_hrs'].apply(lambda x: '{:.2f} hrs'.format(x))


mydat = new_data.head(10)\
    .tail(10)\
    .filter(["airport_code","flights_total","delays_total","proportion_delayed", "avg_delay_time_hrs"])

display(mydat)
```

## QUESTION|TASK 3

__What is the best month to fly if you want to avoid delays of any length? Discuss the metric you chose and why you chose it to calculate your answer. Include one chart to help support your answer, with the x-axis ordered by month. (To answer this question, you will need to remove any rows that are missing the Month variable.)__

_According to the bar graph below, September is the best month to fly if you want followed by November. As these months have the lowest delay rate i.e. 0.16452 and 0.16683 respectively. As per the analysis, it is best to avoid flying in Decmber and June as these months have the fighest delays in flights._

_include figures in chunks and discuss your findings in the figure._

```{python}

df = df.dropna(subset=['month'])

df['month'] = df['month'].replace('Febuary', 'February')

month_data = df.groupby('month').agg({
    'num_of_flights_total': 'sum',
    'num_of_delays_total': 'sum'
}).reset_index()


month_data['proportion_delayed'] = month_data['num_of_delays_total'] / month_data['num_of_flights_total']

month_order = ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December']

chart = px.bar(month_data, 
               x='month', 
               y='proportion_delayed',
               color='proportion_delayed',  # Color bars based on the proportion_delayed values
               color_continuous_scale='viridis',  # Set color scale
               title='Proportion of Delayed Flights by Month',
               labels={'proportion_delayed': 'Proportion Delayed'},
               category_orders={'month': month_order},
               width=800,  # Set the width of the chart
               height=500,  # Set the height of the chart
               template='plotly_dark',  # Use a dark template for better visibility
               )

chart.update_layout(
    xaxis_title='Month',
    yaxis_title='Proportion Delayed',
    showlegend=False,  # Hide the legend to avoid clutter
)
# chart = px.bar(month_data, x='month', y='proportion_delayed', 
#                title='Proportion of Delayed Flights by Month',
#                labels={'proportion_delayed': 'Proportion Delayed'},
#                category_orders={'month': month_order})

chart.show()


```



## QUESTION|TASK 4

__According to the BTS website, the “Weather” category only accounts for severe weather delays. Mild weather delays are not counted in the “Weather” category, but are actually included in both the “NAS” and “Late-Arriving Aircraft” categories. Your job is to create a new column that calculates the total number of flights delayed by weather (both severe and mild). You will need to replace all the missing values in the Late Aircraft variable with the mean. Show your work by printing the first 5 rows of data in a table. Use these three rules for your calculations:__

__100% of delayed flights in the Weather category are due to weather__

__30% of all delayed flights in the Late-Arriving category are due to weather.__

__From April to August, 40% of delayed flights in the NAS category are due to weather. The rest of the months, the proportion rises to 65%__


_This shows the columns that calculates the total number of flights delayed by weather. There are two conditions where the flights gets delayed - sever and mild. NAS and Late-Arriving Aircraft includes mild weather delays as well. ATL has the highest number of dealays in total beacuse of severe weather. In the late arriavl Aircraft category, ORD has the highest number of delays because of mild weather. It is the same case forthe NAS category as well, ORD airport has the highest dealys with 3519.75 flights delay because of mild weather._

```{python}
#| label: Q4
#| code-summary: Read and format data
# Include and execute your code here

# Replace missing values in 'num_of_delays_late_aircraft' with the mean
df['num_of_delays_late_aircraft'] = df['num_of_delays_late_aircraft'].replace(-999, df['num_of_delays_late_aircraft'][df['num_of_delays_late_aircraft'] != -999].mean())

# Define weights for mild delays
weights = {'late_arrive': 0.3, 'NAS_cat': 0.4, 'other': 0.65}

# Create columns with weighted delays
df['weather_Severe'] = df['num_of_delays_weather']
df['late_arrive_mild'] = df['num_of_delays_late_aircraft'] * weights['late_arrive']
df['NAS_cat_mild'] = df['num_of_delays_nas'] * np.where(df['month'].isin(['April', 'May', 'June', 'July', 'August']), weights['NAS_cat'], weights['other'])

# Calculate the total weather-related delays
df['Total'] = df[['weather_Severe', 'late_arrive_mild', 'NAS_cat_mild']].sum(axis=1).round(2)
print(df[['airport_code','weather_Severe', 'late_arrive_mild', 'NAS_cat_mild', 'Total']].head(5))

```



## QUESTION|TASK 5

__Using the new weather variable calculated above, create a barplot showing the proportion of all flights that are delayed by weather at each airport. Discuss what you learn from this graph__

_The Bar graph shows the porportion of all flights that are delayed by weather at each airport. Overall ATL airport is has the highest rate with more than 0.007 porportion dealyed by weather. Whereas SAN airport has the lowest dealy rate becuase of weather being ony 0.0047 porportion.
```{python}


# Calculate the total number of flights and delayed flights by weather for each airport
airport_stats = df.groupby('airport_code').agg({
    'weather': 'sum',  # Total delayed flights by weather
    'num_of_flights_total': 'sum'  # Total number of flights
}).reset_index()

# Calculate the proportion of delayed flights by weather
airport_stats['proportion_delayed_weather'] = airport_stats['weather'] / airport_stats['num_of_flights_total']

# Create a more visually appealing bar chart using Plotly Express
chart = px.bar(airport_stats, 
               x='airport_code', 
               y='proportion_delayed_weather',
               color='proportion_delayed_weather',  # Color bars based on the proportion_delayed_weather values
               color_continuous_scale='viridis',  # Set color scale
               title='Proportion of all Flights Delayed by Weather at Each Airport',
               labels={'proportion_delayed_weather': 'Proportion Delayed by Weather'},
               width=800, 
               height=500, 
               template='plotly_dark',
               )

chart.update_layout(
    xaxis_title='Airport Code',
    yaxis_title='Proportion Delayed by Weather',
    showlegend=False,  # Hide the legend to avoid clutter
)

chart.show()

```